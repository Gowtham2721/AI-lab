'''
A Bayesian network is a directed acyclic graph in which each edge corresponds to a conditional
dependency, and each node corresponds to a unique random variable.
Bayesian network consists of two major parts: a directed acyclic graph and a set of conditional
probability distributions
 The directed acyclic graph is a set of random variables represented by nodes.
 The conditional probability distribution of a node (random variable) is defined for every
possible outcome of the preceding causal node(s).
'''
'''code'''
pip install pomegranate #to install

import math
from pomegranate import *
guest=DiscreteDistribution({'A':1./3,'B':1./3,'C':1./3})
prize=DiscreteDistribution({'A':1./3,'B':1./3,'C':1./3})
monty=ConditionalProbabilityTable(
[['A','A','A',0.0],
['A','A','B',0.5],
['A','A','C',0.5],
['A','B','A',0.0],
['A','B','B',0.0],
['A','B','C',1.0],
['A','C','A',0.0],
['A','C','B',1.0],
['A','C','C',0.0],
['B','A','A',0.0],
['B','A','B',0.0],
['B','A','C',1.0],
['B','B','A',0.5],
['B','B','B',0.0],
['B','B','C',0.5],
['B','C','A',1.0],
['B','C','B',0.0],
['B','C','C',0.0],
['C','A','A',0.0],
['C','A','B',1.0],
['C','A','C',0.0],
['C','B','A',1.0],
['C','B','B',0.0],
['C','B','C',0.0],
['C','C','A',0.5],
['C','C','B',0.5],
['C','C','C',0.0]],[guest,prize])
s1=State(guest,name="guest")
s2=State(prize,name="prize")
s3=State(monty,name="monty")
network=BayesianNetwork("Monty Hall Problem")
network.add_states(s1,s2,s3)
network.add_edge(s1,s3)
network.add_edge(s2,s3)
network.bake()

beliefs=network.predict_proba({'guest':'A','monty':'B'})
beliefs=map(str,beliefs)
op=[(f"{state.name}\t{str(belief)}") for state,belief in zip(network.states,beliefs)]
for i in op:
    print(i)


'''
output
--------
guest	A
prize	{
    "class" : "Distribution",
    "dtype" : "str",
    "name" : "DiscreteDistribution",
    "parameters" : [
        {
            "A" : 0.3333333333333334,
            "B" : 0.0,
            "C" : 0.6666666666666664
        }
    ],
    "frozen" : false
}
monty	B
'''
